FORMAT: 1A
HOST: https://188.226.221.177

# ClanOfthecloud APIs

[ClanOfTheCloud](http://www.clanofthecloud.com) is a Mobile Gaming Backend as a Service (Baas) Company. You can create an account on our website, 
and try us with your next social game! We're scalable, multiplateform and we offer a full API.

## Server's addresses, load balancing and failover


## Token-based App Authentication

Once you've created an account, you can provision a Game in the FrontOffice application in either sandbox or production mode.
We're using a classic APIKEY / APISECRET couple to authenticate all requests.

Every request should have two headers set with your game credentials :

|Header     | Value         |
|---        |---            |
|x-apikey   |Your API key   |
|x-apisecret|Your API secret|

# Gamers routes 

In addition to the Authentication above, gamers are authenticated too.
Before playing, the gamer needs an identity... Login provides such an identity.

## Gamer login [/v1/gamer/login]

The login route is used to authenticate a gamer, and get basic profile information about him.

**Note:** If an existing gamer can't be found, a new one is created and returned.

Login for authenticated gamers will use one of these authentication methods : 

* Facebook Connect: use the `ID` and the `oauth token` from Facebook

* Google+ Sign-in: use the `ID` and the `oauth token` from Google+

* RAW: use the `gamer_id` and the `gamer_secret` from a previous login



### After login

After login has been called, HTTP Basic Authentication will be used to authenticate every request.

The 3 authentication headers will look like :

|Header     | Value         |
|---        |---            |
|x-apikey   |Your API key   |
|x-apisecret|Your API secret|
|Authorization| Basic `gamer_id:gamer_secret` *(base64 encoded)*|

Both `gamer_id` and `gamer_secret` are returned by `/v1/gamer/login`.

**Note:** It is your responsibility to store these to help the user log in later (in RAW mode).


### Login [POST]

### Body description

A JSON object must be sent in the request body with the following structure.

    IMPL We should decide if ?parameters would be better for actions... I think so

|Field|Description|Value|
|---|---|---|
|network|string, required|can be one of ["raw", "facebook", "googleplus"]
|id|string, required | the user ID for this network
|token|string, required| the user secret/token for this network

### Response description

**Note:** If a new gamer was created, the response code is `201`, `200` otherwise.

The response is a JSON object.

|Field|Description|Value|
|---|---|---|
|gamer_id|string| user_id used in basic authentication for gamer authenticated requests
|gamer_secret|string| secret used in basic authentication for gamer authenticated requests
|profile|json| gamer's profile, including "name", "email", "nickname", ...
|vfs|json| list of key/value associated to the app/game
|gamervfs|json| list of key/value associated to the gamer
|matches|json| array of match currently in open state of the gamer

+ Request (application/json)

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret

    + Body
        
            { 
                "network": "facebook",
                "id" : "1000001010",
                "token" : "CAAIoRjU6xxYBAAy5Ymu...7XAehrcVQBUOG7oBVNatEUZD"
            }

+ Response 200 (application/json)

        {
            "gamer_id" : "dfg54g2dfg54sqdf32wfds54fqdf",
            "gamer_secret" : "dsfg5dgfs654ezrt321ds31gdfs654ert",
            "profile" : {},
            "vfs" : {},
            "gamervfs" : {}
        }
    
+ Request (application/json)

    + Headers
    
            x-apikey : INVALID KEY
            x-apisecret : INVALID SECRET

    + Body
        
            { 
                "network": "facebook",
                "id" : "1000001010",
                "token" : "CAAIoRjU6xxYBAAy5Ymu...7XAehrcVQBUOG7oBVNatEUZD"
            }

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "Invalid App Credentials"
        }


## Gamer anonymous login [/v1/gamer/login/anonymous]
The login/anonymous route is used to create a new gamer without any informations.

### Login [POST]

### Response description

**Note:** same response as for login route.

+ Request (application/json)

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret

+ Response 200 (application/json)

        {
            "gamer_id" : "dfg54g2dfg54sqdf32wfds54fqdf",
            "gamer_secret" : "dsfg5dgfs654ezrt321ds31gdfs654ert",
            "profile" : {},
            "vfs" : {},
            "gamervfs" : {}
        }
    
+ Request (application/json)

    + Headers
    
            x-apikey : INVALID KEY
            x-apisecret : INVALID SECRET

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "Invalid App Credentials"
        }



## Gamer logout [/v1/gamer/logout]

Log a gamer out

### Logout [POST]

+ Request

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization : Basic gamer_id:gamer_secret

+ Response 200 

+ Request

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization : Basic INVALID GAMER IDENTITY

+ Response 401

        {
            "code" : "Unauthorized",
            "message" : "Invalid Gamer Credentials"
        }
        
+ Request

    + Headers
    
            x-apikey : INVALID API KEY
            x-apisecret : INVALID API SECRET
            Authorization : Basic gamer_id:gamer_secret

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "Invalid App Credentials"
        }

## Unlink authentication network [/v1/gamer/unlink]

Used to unlink a user account from Facebook or Google+ credentials.

### Unlink [POST]

+ Request

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization : Basic gamer_id:gamer_secret
    + Body
        
            { 
                "network": "facebook"
            }

+ Response 200 (application/json)

## Gamer VFS  [/v1/gamer/vfs/{domain}/{key}]

Gamer VFS is a key-value store you can use to associate data with a user. 

Use it to store state, preferences... any data your user would like to share among devices.

### Domains

Because you might want to share Gamer VFS data between games you (or other companies) wrote,
you can define so called "domains" which protect your data and let use share it securely.

A Domain is a namespace, but you must know the Domain-Key for this domain to have access to it. So to share
data stored in a domain, you just have to share the Domain-Key.

Your game has its own private Domain (see in FrontOffice dashboard) which you probably don't want to share
but you can create other domains to share data between apps, or even between app-developers.

    I think we could use a magic `private` domain, replaced on the server with the apisecret (or a derived id).
    It will provide secure game-private data.
    Similarly, we could offer a magic `public`domain, not replaced on the server... but I'm against it, as it
    gives the impression we don't take security seriously enough

    Anyway, I think we'll need, in the Game collection: the domains created by the dev, and the domains 'imported' by the dev
    This will provide an additional level of security, and we'll have a list of valid domains to add stuff later

### Get gamer's data [GET]

###### Possible values for error 404
* `Key not found` ... the specified key doesn't exist
* `Domain not found` ... the specified domain doesn't exist

###### response description
|Field|Description|Value|
|---|---|---|
|gamervfs|json| list of key/value associated to the gamer

+ Parameters
    + domain (required, string) ... the domain where to retreive the key/value
    + key (optional, string) ... the desired key, if omited all keys of the domains will be returned

+ Request

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization : Basic gamer_id:gamer_secret
            
+ Response 200 (application/json)

        {
            "gamervfs" : { "key" :"data which could be a json" }
        }

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "the gamer token is no longer available, call login again!", 
            "data" : "optional error data" 
        }        

+ Response 404 (application/json)

        {
            "code" : "Key not found",
            "message" : "the specified key is not found"
            "data" : "optional error data" 
        }  

### Set gamer's data [PUT]

**if domain and/or key don't exist, they are created**

+ Parameters
    + domain (required, string) ... the domain where to store the key/value
    + key (required, string) ... the desired key

+ Request (application/json)

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization : Basic gamer_id:gamer_secret
            
    + Body
    
            { "value" : "data which could be a json" }
            
+ Response 200


+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "the gamer token is no longer available, call signin!", 
            "data" : "optional error data" 
        }        
 
    
### Remove gamer's data [DELETE]

###### Possible values for error 404
* `Key not found` ... the specified key doesn't exist
* `Domain not found` ... the specified domain doesn't exist

+ Parameters
    + domain (required, string) ... the domain from where to get the key/value
    + key (required, string) ... the key to be removed

+ Request

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization : Basic gamer_id:gamer_secret
            
+ Response 200

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "the gamer token is no longer available, call signin!", 
            "data" : "optional error data" 
        }  
        
+ Response 404 (application/json)

        {
            "code" : "Key not found",
            "message" : "the specified key is not found"
            "data" : "optional error data" 
        }  

## Transactions [/v1/gamer/tx]

Transactions are used to keep track of any inventory or portfolio or wallet... It's basic functionality
can be used in various contexts.

In the case of an inventory, transactions will add or remove units from it. 
When used as a portfolio (for virtual currency), transactions add or remove units too.
And feel free to invent new uses!

### Create transaction [POST]
A transaction is a Hash where the key is the unit, and the value is a positive (credit) or negative (debit) amount.
So a single transaction can both credit and debit different units.

+ Request (application/json)

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                transaction: { 
                    "Gold": +100,
                    "Silver" : -2.5,
                    "Arrows" : 20
                },
                description: "This is an example transaction"
            }

+ Response 200 (application/json)

        { 
            "Gold": 130,
            "Silver" : 0,
            "Arrows" : 20
        }
        
+ Request (application/json)

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "transaction": { "Gold": -1000000},
                "description": "Excessive transaction"
            }

+ Response 549

### List transactions [GET]

Use this API to list the transactions that took place for this gamer. You can specify an optional
`?unit=xxx` parameter where `xxx` is the unit (Silver, Gold or Arrows in our example). If
`unit` is specified, the result will only contain transactions about this unit.

+ Request (application/json)

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        [
            { "ts": '2014-08-27T16:44:17.796Z', "tx": { Gold: 100 }, "desc": 'jsclient test' },
            { "ts": '2014-08-27T16:02:22.645Z', "tx": { Gold: -100, Silver: 1 }, "desc": 'jsclient test' },
            { "ts": '2014-08-27T16:02:22.371Z', "tx": { Gold: 100 }, "desc": 'jsclient test' }
        ]

## Balance [/v1/gamer/tx/balance]

Use this API to get the current balance. It will return a Hash of each unit and the amount held by the gamer.
The balance is also returned each time you create a new transaction

### Get the gamer's balance [GET]

+ Request (application/json)

    + Headers
    
            x-apikey : test_api_key
            x-apisecret : test_api_secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "Gold": 130,
            "Silver" : 1.5,
            "Arrows" : 20
        }

