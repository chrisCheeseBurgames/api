FORMAT: 1A
HOST: https://188.226.221.177

# ClanOfthecloud APIs

[ClanOfTheCloud](http://www.clanofthecloud.com) is a Mobile Gaming Backend as a Service (Baas) Company. You can create an account on our website, 
and try us with your next social game! We're scalable, multiplateform and we offer a full API.

## Server's addresses, load balancing and failover


## Token-based App Authentication

Once you've created an account, you can provision a Game in the FrontOffice application in either sandbox or production mode.
We're using a classic APIKEY / APISECRET couple to authenticate all requests.

Every request should have two headers set with your game credentials :

|Header     | Value         |
|---        |---            |
|x-apikey   |Your API key   |
|x-apisecret|Your API secret|

## After login

After login has been called, HTTP Basic Authentication will be used to authenticate every request.

The 3 authentication headers will look like :

|Header     | Value         |
|---        |---            |
|x-apikey   |Your API key   |
|x-apisecret|Your API secret|
|Authorization| Basic `gamer_id:gamer_secret` *(base64 encoded)*|

Both `gamer_id` and `gamer_secret` are returned by `/v1/gamer/login`.

**Note:** It is your responsibility to store these to help the user log in later (in RAW mode).


# Group Login routes

In addition to the App Authentication above, gamers are authenticated too.
Before playing, the gamer needs an identity... Login provides such an identity.

The login route is used to authenticate a gamer, and get basic profile information about him.

**Note:** If an existing gamer can't be found, a new one is created and returned.

Login for authenticated gamers will use one of these authentication methods : 

* Facebook Connect: use the `ID` and the `oauth token` from Facebook

* Google+ Sign-in: use the `ID` and the `oauth token` from Google+

* anonymous: use the `gamer_id` and the `gamer_secret` from a previous login


## POST /v1/login


### Body description

A JSON object must be sent in the request body with the following structure.

|Field|Description|Value|
|---|---|---|
|network|string, required|can be one of ["anonymous", "facebook", "google"]
|id|string, required | the user ID for this network
|secret|string, required| the user secret/token for this network

### Response description

**Note:** If a new gamer was created, the response code is `201`, `200` otherwise.

The response is a JSON object.

|Field|Description|Value|
|---|---|---|
|gamer_id|string| user_id used in basic authentication for gamer authenticated requests
|gamer_secret|string| secret used in basic authentication for gamer authenticated requests
|profile|json| gamer's profile, including "name", "email", "nickname", ...
|vfs|json| list of key/value associated to the app/game
|gamervfs|json| list of key/value associated to the gamer
|matches|json| array of match currently in open state of the gamer

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret

    + Body
        
            { 
                "network": "facebook",
                "id" : "1000001010",
                "secret" : "CAAIoRjU6xxYBAAy5Ymu...7XAehrcVQBUOG7oBVNatEUZD"
            }

+ Response 200 (application/json; charset=utf-8)

        {
            "gamer_id" : "dfg54g2dfg54sqdf32wfds54fqdf",
            "gamer_secret" : "dsfg5dgfs654ezrt321ds31gdfs654ert",
            "profile" : {},
            "vfs" : {},
            "gamervfs" : {}
        }
    
+ Request (application/json)

    + Headers
    
            x-apikey : INVALID KEY
            x-apisecret : INVALID SECRET

    + Body
        
            { 
                "network": "facebook",
                "id" : "1000001010",
                "secret" : "CAAIoRjU6xxYBAAy5Ymu...7XAehrcVQBUOG7oBVNatEUZD"
            }

+ Response 401 (application/json; charset=utf-8)

        {
            "code" : "Unauthorized",
            "message" : "Invalid App Credentials"
        }


## POST /v1/login/anonymous
The login/anonymous route is used to create a new gamer without any informations.

### Response description

**Note:** same response as for login route.

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret

+ Response 200 (application/json; charset=utf-8)

        {
            "gamer_id" : "dfg54g2dfg54sqdf32wfds54fqdf",
            "gamer_secret" : "dsfg5dgfs654ezrt321ds31gdfs654ert",
            "profile" : {},
            "vfs" : {},
            "gamervfs" : {}
        }
    
+ Request (application/json)

    + Headers
    
            x-apikey : INVALID KEY
            x-apisecret : INVALID SECRET

+ Response 401 (application/json; charset=utf-8)

        {
            "code" : "Unauthorized",
            "message" : "Invalid App Credentials"
        }



## POST /v1/gamer/logout

Log a gamer out

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret

+ Response 200 (application/json; charset=utf-8)

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic INVALID GAMER IDENTITY

+ Response 401 (application/json; charset=utf-8)

        {
            "code" : "Unauthorized",
            "message" : "Invalid Gamer Credentials"
        }
        
+ Request (application/json)

    + Headers
    
            x-apikey : INVALID API KEY
            x-apisecret : INVALID API SECRET
            Authorization : Basic gamer_id:gamer_secret

+ Response 401 (application/json; charset=utf-8)

        {
            "code" : "Unauthorized",
            "message" : "Invalid App Credentials"
        }

## POST /v1/gamer/unlink

Used to unlink a user account from Facebook or Google+ credentials.

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret
    + Body
        
            { 
                "network": "facebook"
            }

+ Response 200 (application/json; charset=utf-8)

# Group Gamer profile

## Profile [/v1/gamer/profile]

Profile are data related to the user (globally)

### Set Profile [POST]

Fields can be added one be one, data are merged.
The following fields can be set :
    ["displayName", "lang", "firstName", "lastName", "addr1", "addr2", "addr3", "avatar"]

**note** : avatar must be an URL, lang is the ISO-639-1 country code (http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes)

i.e when executing POST /v1/gamer/profile {"displayName": "Wonder Mike"}
if the current profile is 
    "profile" : {
        "email" : "michael@cotc.com"
    }
then the result will be
    "profile" : {
        "displayName": "Wonder Mike",
        "email" : "michael@cotc.com"
    }

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "displayName": "Wonder Mike"
            }

+ Response 200 (application/json; charset=utf-8)

        { 
            "profile" : {
                "displayName": "Wonder Mike",
                "email" : "michael@cotc.com"
            },
            "updated" : true
        }


### Get profile [GET]

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "properties" : {
                "Board": "river",
                "Level" : 20
                "Expert" : false
            }
        }

# Group Gamer Querying

## Find Users  [/v1/gamer{?q}{&limit}{&skip}]  

### search [GET]

+ Parameters
    + q (required, string) ... the value to match with
    + limit = `10` (optional, number) ... number of desired responses
    + skip = `0` (optional, number) ... skip the `skip` firsts responses

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret
            
+ Response 200 (application/json)

        {
            "count" : 10,
            "result" : [
                { 
                "gamer_id" : "dfg54g2dfg54sqdf32wfds54fqdf",
                "profile" : {}
                }
            ]
        }

## Valid gamer_id  [/v1/gamer/gamer_id/{id}]  

### check [GET]

+ Parameters
    + id (required, string) ... the id to check

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret
            
+ Response 200 (application/json)

        {
            "gamer_id" : "dfg54g2dfg54sqdf32wfds54fqdf",
            "profile" : {}
        }

## Find a "Network" gamer_id  [/v1/gamer/{network}/{id}]  

### check [GET]

+ Parameters
    + network (required, string) ... the network on which to search "facebook", "google"
    + id (required, string) ... the id in the network referential to check

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret
            
+ Response 200 (application/json)

        {
            "gamer_id" : "dfg54g2dfg54sqdf32wfds54fqdf",
            "profile" : {}
        }

# Group Key-Value Store

## Gamer VFS  [/v1/gamer/vfs/{domain}/{key}{?binary}]

Gamer VFS is a key-value store you can use to associate data with a user. 

Use it to store state, preferences... any data your user would like to share among devices.

### Domains

Because you might want to share Gamer VFS data between games you (or other companies) wrote,
you can define so called "domains" which protect your data and let use share it securely.

A Domain is a namespace, but you must know the Domain-Key for this domain to have access to it. So to share
data stored in a domain, you just have to share the Domain-Key.

Your game has its own private Domain (see in FrontOffice dashboard) which you probably don't want to share
but you can create other domains to share data between apps, or even between app-developers.
 
### Get gamer's data [GET]

###### Possible values for error 404
* `Key not found` ... the specified key doesn't exist
* `Domain not found` ... the specified domain doesn't exist

+ Parameters
    + domain (required, string, `private`) ... the domain where to retreive the key/value
    + key (optional, string) ... the desired key, if omited all keys and values of the domains will be returned

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret
            
+ Response 200 (application/json)

        {
            "key" : "data which could be a json"
        }

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret
            
+ Response 200 (application/json)

        {
            "key1" : "any json value, object, array for key1",
            "key2" : "any json value, object, array for key2",
            "key3" : "any json value, object, array for key3",
            "key4" : "any json value, object, array for key4"
        }

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "the gamer token is no longer available, call login again!", 
            "data" : "optional error data" 
        }        

+ Response 404 (application/json)

        {
            "code" : "Key not found",
            "message" : "the specified key is not found"
            "data" : "optional error data" 
        }  

### Set gamer's data [PUT]

You can store data easily. Simply send the data to be stored, as a JSON object, in the body of the request. Note that simple strings are not allowed. Arrays and objects are.

**if the key doesn't exist, it's dynamically created**

#### Optional Binary storage

You can opt to store your data in Amazon S3 storage. It's the recommended option for values weighting more than 100ko.
With the `binary` option, the API will reply with two URLs: one to upload the file to, and the other with the URL to access the value on the internet.

So uploading a binary value becomes a two steps process: 
- first call `PUT` to pre-authorize storage, 
- then upload the contents directly to Amazon S3's preauthorized URL.
- calling `GET` will then return the URL of the value on Amazon S3.

+ Parameters
    + domain (required, string, `private`) ... the domain where to store the key/value
    + key (required, string) ... the desired key
    + binary (optional, string) ... use S3 storage

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret
            
    + Body
    
            {"whatever": "your JSON value"}
            
+ Response 200 (application/json)

    + Body
    
            {"done": 1}

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "the gamer token is no longer available, call signin!", 
            "data" : "optional error data" 
        }        
        
+ Request (application/json)

    + parameters
    
            binary : true

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret
            
+ Response 200 (application/json)

    + Body
    
            {
                "done": 1,
                "getURL": url,
                "putURL": url
            }

    
### Remove gamer's data [DELETE]

    NOTE : we can't yet distinguish a missing key from an incorrect domain...

###### Possible reasons for error 404
* `Key not found` ... the specified key doesn't exist
* `Domain not found` ... the specified domain doesn't exist

+ Parameters
    + domain (required, string, `private`) ... the domain from where to get the key/value
    + key (optional, string) ... the key to be removed (all if not specified)

+ Request

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization : Basic gamer_id:gamer_secret
            
+ Response 200 (application/json)

    + Body
    
            1


+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "the gamer token is no longer available, call signin!", 
            "data" : "optional error data" 
        }  
        
+ Response 404 (application/json)

        {
            "code" : "Key not found",
            "message" : "the specified key is not found"
            "data" : "optional error data" 
        }  

## Game VFS  [/v1/vfs/{domain}/{key}]

Game VFS is a key-value store you can use to associate data with a game. 

Use it to store level, booard... any data your game would like to share among users.
 
### Get game's data [GET]

###### Possible values for error 404
* `Key not found` ... the specified key doesn't exist
* `Domain not found` ... the specified domain doesn't exist

+ Parameters
    + domain (required, string, `private`) ... the domain where to retreive the key/value
    + key (optional, string) ... the desired key, if omited all keys and values of the domains will be returned

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            
+ Response 200 (application/json)

        {
            "key" : "data which could be a json"
        }

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            
+ Response 200 (application/json)

        {
            "key1" : "any json value, object, array for key1",
            "key2" : "any json value, object, array for key2",
            "key3" : "any json value, object, array for key3",
            "key4" : "any json value, object, array for key4"
        }


+ Response 404 (application/json)

        {
            "code" : "Key not found",
            "message" : "the specified key is not found"
            "data" : "optional error data" 
        }  

### Set game's data [PUT]

You can store data easily. Simply send the data to be stored, as a JSON object, in the body of the request. Note that simple strings are not allowed. Arrays and objects are.

**if key don't exist, they are created**

+ Parameters
    + domain (required, string, `private`) ... the domain where to store the key/value
    + key (required, string) ... the desired key

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            
    + Body
    
            {"whatever": "your JSON value"}
            
+ Response 200 (application/json)

    + Body
    
            1
 
    
### Remove game's data [DELETE]

    NOTE : we can't yet distinguish a missing key from an incorrect domain...

###### Possible reasons for error 404
* `Key not found` ... the specified key doesn't exist
* `Domain not found` ... the specified domain doesn't exist

+ Parameters
    + domain (required, string, `private`) ... the domain from where to get the key/value
    + key (optional, string) ... the key to be removed (all if not specified)

+ Request

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            
+ Response 200 (application/json)

    + Body
    
            1
        
+ Response 404 (application/json)

        {
            "code" : "Key not found",
            "message" : "the specified key is not found"
            "data" : "optional error data" 
        }  


# Group Transactions

Transactions are used to keep track of any inventory or portfolio or wallet... It's basic functionality
can be used in various contexts.

In the case of an inventory, transactions will add or remove units from it. 
When used as a portfolio (for virtual currency), transactions add or remove units too.
And feel free to invent new uses!

## How domains work with transactions

Transactions/portfolios/inventories can be shared between games with domains. The _private_ domain is private to the game
but you can create other domains shared between games.

This feature can be used to share a virtual currency between all your games, or to team up with other game developers
to implement cross-marketing or any incentive...

## POST /v2.2/gamer/tx/{domain}

A transaction is a Hash where the key is the unit, and the value is a positive (credit) or negative (debit) amount.
So a single transaction can both credit and debit different units.

+ Parameters
    + domain (required, string, `private`) ... The domain used in the transaction

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                transaction: { 
                    "Gold": 100,
                    "Silver": -2.5,
                    "Arrows": 20
                },
                description: "This is an example transaction"
            }

+ Response 200 

        {
            "balance": {
                "Gold": 130,
                "Silver": 0,
                "Arrows": 20
            },
            "achievements": {
                "achievementName":     {
                    "type": "limit",
                    "config": {
                        "maxValue": 1000,
                        "unit": "score"
                    },
                    "gameData": {
                        "hidden": true
                    },
                    "progress": 1
                }
            }
        }
        
+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "transaction": { "Gold": -1000000},
                "description": "Excessive transaction"
            }

+ Response 549

## POST /v1/gamer/tx/{domain}

Note: this API is obsolete (please use the most recent version as documented above).

A transaction is a Hash where the key is the unit, and the value is a positive (credit) or negative (debit) amount.
So a single transaction can both credit and debit different units.

+ Parameters
    + domain (required, string, `private`) ... The domain used in the transaction

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                transaction: { 
                    "Gold": 100,
                    "Silver": -2.5,
                    "Arrows": 20
                },
                description: "This is an example transaction"
            }

+ Response 200 

        { 
            "Gold": 130,
            "Silver": 0,
            "Arrows": 20
        }
        
+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "transaction": { "Gold": -1000000},
                "description": "Excessive transaction"
            }

+ Response 549

## GET /v2.4/gamer/tx/{domain}{?unit}{&skip}{&limit}

Use this API to list the transactions of the current gamer. You can specify an optional
`?unit=xxx` parameter where `xxx` is the unit (Silver, Gold or Arrows in our example). If
`unit` is specified, the result will only contain transactions about this unit.
Use `?skip` and `?limit` to page through transactions.

Note: the `count` returned is the total number of transactions (useful whith paging)

+ Parameters
    + domain (required, string, `private`) ... The domain used in the transaction
    + unit (optional, string, `Gold`) ... To restrict the history to a single Unit
    + skip (optional, number, `30`) ... The number of rows to skip
    + limit (optional, number, `10`) ... The number of rows to return

+ Request

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json; charset=utf-8)

        {   "history" : [
            { "ts": "2014-08-27T16:44:17.796Z", "tx": { "Gold": 100 }, "desc": "jsclient test" },
            { "ts": "2014-08-27T16:02:22.645Z", "tx": { "Gold": -100, "Silver": 1 }, "desc": "jsclient test" },
            { "ts": "2014-08-27T16:02:22.371Z", "tx": { "Gold": 100 }, "desc": "jsclient test" }
            ],
            "count": 3
        }

## GET /v1/gamer/tx/{domain}{?unit}

Note: this API is obsolete (please use the most recent version below).

Use this API to list the transactions that took place for this gamer. You can specify an optional
`?unit=xxx` parameter where `xxx` is the unit (Silver, Gold or Arrows in our example). If
`unit` is specified, the result will only contain transactions about this unit.

+ Parameters
    + domain (required, string, `private`) ... The domain used in the transaction
    + unit (optional, string, `Gold`) ... To restrict the history to a single Unit

+ Request

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json; charset=utf-8)

        { "history" : [
            { "ts": "2014-08-27T16:44:17.796Z", "tx": { "Gold": 100 }, "desc": "jsclient test" },
            { "ts": "2014-08-27T16:02:22.645Z", "tx": { "Gold": -100, "Silver": 1 }, "desc": "jsclient test" },
            { "ts": "2014-08-27T16:02:22.371Z", "tx": { "Gold": 100 }, "desc": "jsclient test" }
            ]
        }

## GET /v1/gamer/tx/{domain}/balance

Use this API to get the current balance. It will return a Hash of each unit and the amount held by the gamer.
The balance is also returned each time you create a new transaction

+ Parameters
    + domain (required, string, `private`) ... The domain used in the transaction

+ Request

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "Gold": 130,
            "Silver": 1.5,
            "Arrows": 20
        }

# Group Gamer Properties

## Properties [/v1/gamer/properties]

Properties are used to allow match making...
They are related to a game.

### Set properties [POST]

Properties are basic type (number, stringn boolean) json

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "Board": "river",
                "Level": 20
                "Expert": false
            }

+ Response 200 (application/json)

        { 
            "properties" : {
                "Board": "river",
                "Level": 20
                "Expert": false
            },
            "updated": true
        }


### Get properties [GET]

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "properties" : {
                "Board": "river",
                "Level" : 20
                "Expert" : false
            }
        }

### delete properties [DELETE]

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "done": true
        }


## Property [/v1/gamer/properties/{key}]

Properties are used to allow match making...
They are related to a game.

+ Parameters
    + key (required, string) ... name of the property

### Set property [POST]

Properties are basic type (number, string, boolean) or array of basic type

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "value": "river",
            }

+ Response 200 (application/json)

        { 
            "done" : true
        }


### Get property [GET]

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "Board": "river"
        }


### delete property [DELETE]

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "done": true
        }


# Group Social features

## Friends

### GET /v1/gamer/friends/{?status}

+ Parameters
    + status (optional, string) ... "blacklist" to retrieve the blacklisted gamer's

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { "friends|blacklisted" : [
            { "<gamer_id_1>" : { displayName : "gamer1", lang : "en" } },
            {"<gamer_id_2>" : { displayName : "gamer2", lang : "fr" } }
        ] }
        
### POST /v1/gamer/friends/{friendid}?{status}

+ Parameters
    + friendid (required, string) ... a gamer id
    + status (required, string) ... must be one of [`add` | `forget` | `blacklist`]

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "<gamer_id>" : "<status>"
        }

+ Response 404 (application/json)

        { 
            "code" : "GamerIdNotFound"
        }

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "<gamer_id>" : "<status>"
        }

+ Response 404 (application/json)

        { 
            "code" : "StatusNotFound"
        }

+ Response 501 (application/json)

        { 
            "code" : "StatusNotSupported"
        }

# Group Sponsoring

## God father [/v1/gamer/godfather]

### Get sponsoring code [PUT]

Obtains a code for sponsoring. The code is different for each game

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { "godfathercode" : "wSde2dF" }



### Set godfather [POST]

Set the godfather of the current user and give a reward to the godfather.

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "godfather": "wSde2dF",
                "maturity" : 100,
                "reward" : {
                    transaction : { "gold" : 10},
                    description : "this is a reward tx",
                    domain : "private"
                }
            }

+ Response 200 (application/json)

        { 
            "done" : 1,
            "balance" : {},
            "achievements : {}
        }

+ Response 438 (application/json)

        { 
            "code" : "alreadyGodchild"
        }


### Get godfather [GET]

Retreive the godfather of the current user.

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "<gamer_id>" : "..."
        }


### GET /v1/gamer/godchidren

Get every godchildren for the current user.

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        { 
            "godchildren" : [ { "gamer_id" : "..."}]
        }
        
# Group Scores and Leaderboards

## Scores

### POST /v1/gamer/scores/{leaderbord}{?order}

this is not necessary the highest score, but only the highest is stored.

+ Parameters
    + leaderbord (required, string) ... the board where the gamer score in
    + order = `hightolow` (optional, string) ... the order to sort the board `hightolow` or `lowtohigh`

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "score": 100,
                "info" : "whatever json"
            }

+ Response 200 (application/json)

        { 
            "rank" : 1
        }

### GET /v1/gamer/scores/{leaderbord}{?order}{&type}{&page}{&count}

+ Parameters
    + leaderbord (required, string) ... the board where the gamer score in
    + order = `hightolow` (optional, string) ... deprecated, defaults to leaderboard's ordering
    + type = `highscore` (optional, string) ... one of ["highscore", "friendscore"]
    + page = `1` (optional, number) ...  th epage number or a special "me" for centered scores
    + count = `10` (optional, number) ... the max returned rows


+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        {
            "<leaderboard>" : {
                "page" : 2,
                "maxpage" : 100,
                "rankOfFirst" : 10,
                scores : [ 
                        { "gamer_id_1": 
                            { score : 100, info: "whatever", , timestamp : "", profile: {} } 
                        }
                        { "gamer_id_2": 
                            { score : 90, info: "whatever", , timestamp : "", profile: {} } 
                        }
                    ]
            }
        }

+ Response 404 (application/json)

        {
            "code" : "LeaderboardNotFound",
        }  

+ Response 402 (application/json)

        {
            "code" : "NoScoreYet",
            "message" : "Asked for centered scores on a gamer who never scores"
        }  


## GET /v1/gamer/bestscores

### Get all the gamer's bestscores 

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        {
            "easy" : { score:100, info : "desc" , timestamp : ""}
            "meduim" : { score:20, info : "desc", timestamp : "" }
            "hard" : { score:10, info : "desc", timestamp : "" }
        }

# Group Events

Clan of the Cloud let's you send and receive messages between gamers.

You can use this feature for inter-application messaging too, and use it to send any kind of json message.

Ordered delivery is guaranteed, and acknowledgement (or auto-acknowledgement) of each message is required.

### POST /v1/gamer/event/{domain}/{gamer_id}

#### Send a message

Use this API to send a message to another user from your game. Messages are sent to a specific user, in a specific domain. 
You can use domains to send messages accross games (or use `private` for messages sent to your game only).

Messages are **always** JSON objects (not strings nor binary data).

The response body will contain a copy of the message just sent, with an added `id` field. 

+ Parameters
    + domain (required, string, `private`) ... The domain
    + gamer_id (required, string, `5402cf700530df4fa7ed3629`) ... The recepient for the message

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "key": "value",
                "anotherKey" : "another value",
                "data" : [{
                    "any": "data"
                }]
            }
            
+ Response 200 (application/json)

            {
                "id" : "5cf3baf5-742c-4c3c-ad88-d12d84b01574",
                "key": "value",
                "anotherKey" : "another value",
                "data" : [{
                    "any": "data"
                }]
            }


### GET /v1/gamer/event/{domain}{?ack}{&timeout}

#### Receive messages

This route uses long polling to deliver messages, one at a time. If more than one message was queued, you will have to call `receive` more than once.
Normally, you'd setup a loop to call `receive` and deliver messages to your game asynchronously.

`Receive` will block for a specified amount of time (with `?timeout=ms`) or 50 seconds (the default), and will be unblocked if a message is received, or if the call times out.
When a message is received, the HTTP status code is `200`. If it returns because of the timeout, the response code is `204`.

To guarantee delivery, acknowledgement is necessary, but you can use automatic acknoledgement (`?ack=auto`). 
If you want to ack messages, pass `?ack=<messageId>` where `messageID` is the ID of the latest received message. 
If you don't specify an `?ack` parameter, the message is received with no ackowledgement (to bootstrap the loop).

Choose if you want auto or acknowlegement as it can get hairy to mix both.

+ Parameters
    + domain (required, string, `private`) ... The domain
    + ack = `auto` (optional, string, `5cf3baf5-742c-4c3c-ad88-d12d84b01574`) ... The message ID to acknowledge
    + timeout = `50000` (optional, integer) ... The long polling timeout, in milliseconds

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

            {
                "id" : "5cf3baf5-742c-4c3c-ad88-d12d84b01574",
                "key": "value",
                "anotherKey" : "another value",
                "data" : [{
                    "any": "data"
                }]
            }

+ Response 204

# Group Achievements

Clan of the Cloud provides functionality allowing to save the progress of the player and triggering Achievements, like on most popular platforms. This system is device independent and provides the tools required to notify Clan of the Cloud from progress and querying the status of achievements.

Achievements share functionality with the Transaction system. This is because the key/value storage affected by transactions are used to trigger achievements.

### GET /v1/gamer/achievements/{domain}

#### List achievements

Use this API to list the achievements available for your game, along with, for each of them, the progress of the gamer logged in.

+ Parameters
    + domain (required, string, `private`) ... The domain, use `private` to return the default achievemens created for your game in the Front Office

+ Request (application/json)

    + Headers

            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        {
            "achievements": {
                "highScore": {
                    "type": "limit",
                    "config": {
                        "maxValue": 1000,
                        "unit": "score"
                    },
                    "gameData": {
                        "initiallyHidden": true
                    },
                    "gamerData": {
                        "unhidden": true
                    },
                    "progress": 0.06
                }
            }
        }

## Custom information about an achievement [/v1/gamer/achievements/{domain}/{achievement}/gamerdata]

### Set custom information about an achievement, for an user [POST]

Use this API to set the custom data associated with a gamer for a given achievement. This data is associated between a gamer and an achievement, so you might for instance store data on how the achievement was performed.
The whole achievement, as modified is returned.

+ Parameters
    + domain (required, string, `private`) ... The domain, use `private` to return the default achievemens created for your game in the Front Office
    + achievement (required, string) ... The name (identifier) of the achievement

+ Request (application/json)

    + Headers

            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body

            {
                "unhidden": true
            }

+ Response 200 (application/json)

        {
            "achievement": {
                "type": "limit",
                "config": {
                    "maxValue": 1000,
                    "unit": "score"
                },
                "gameData": {
                    "initiallyHidden": true
                },
                "gamerData": {
                    "unhidden": true
                },
                "progress": 0.06
            }
        }

### Extract custom information about an achievement [GET]

Use this API to fetch the custom data associated with a gamer for a given achievement.

+ Parameters
    + domain (required, string, `private`) ... The domain, use `private` to return the default achievemens created for your game in the Front Office
    + achievement (required, string) ... The name (identifier) of the achievement

+ Request (application/json)

    + Headers

            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        {
            "gamerData": {
                "unhidden": true
            },
        }

# Group Matches

Clan of the Cloud provides a simple way to run matches between a set of gamers using on the network. The match system is designed around a centralized game state stored on Clan of the Cloud servers, with gamers participating to the match making a move, updating the global game state and notifying the other players on an asynchronous basis.

This means that this match system is better suited to turn by turn game, rather than real time game such as an MMORPG, which may require a more sophisticated system handled on your servers.

## POST /v1/gamer/matches

Creates a new match, automatically attached to your gamer ID.

### Description of a match

|Field|Description|Value|
|---|---|---|
|creator|string| ID of the gamer who created the game (read only)
|custom_properties|json| freeform JSON containing the user properties of the match
|description|string| description of the game (non localized)
|last_move_id|string| ID of the last move, which must be passed by any player who wishes to make a move (read only)
|match_id|string| ID of the match, keep it safe to allow for joining it or fetching it later (read only)
|max_players|number| maximum number of players who can join this game
|moves|json| list of pending moves, cleared whenever a global_state is posted along with a move by one of the players (read only)
|players|array| list of IDs of players participating to the match (read only)
|status|string| either "running" (meaning that the match is running), either "finished" (meaning that nobody can join the match anymore) (read only)

+ Request (application/json)

    + Headers
    
            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret
    
    + Body
    
            {
                "description": "Sample match for testing",
                "max_players": 3
                "custom_properties": {
                    "type": "coop"
                }
            }

+ Response 200 (application/json)

        {
            "match": {
                "game_id": "541715e10476afa004fc3b82",
                "status": "running",
                "description": "Sample match for testing",
                "custom_properties": {
                    "type": "coop"
                },
                "max_players": 2,
                "players": [
                    "5474476a96af22405e619ebe"
                ],
                "global_state": {},
                "last_move_id": 0,
                "moves": [],
                "match_id": "5474476a96af22405e619ec0"
            }
        }


## GET /v1/gamer/matches{?properties}

Lists the matches available for join, using a query to filter the results.

### Filtering by properties

Matches contain an user defined field named `custom_properties`, which can be used by developers to store and fetch additional details about a game. In the example of a card-based game, one of these properties could store the minimum bet. This information could also be used to help players to join games best suited to their willing. A filter is specified as an URL-encoded JSON containing attributes and the corresponding expected value. No comparison operators are available for now, now is it possible to customize the implementation : when there are more than one attributes, all conditions specified must be met in order for the match to qualify.

The following will return the matches which have a property named type with value being "coop".
`GET /v1/gamer/matches?properties={"type": "coop"}`

+ Parameters
    + properties (required, string) ... a JSON string specifying the properties that need to be present in order to return a match. The JSON uses the filtering syntax as documented above.

+ Request (application/json)

    + Headers

            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        {
            "matches": [
                {
                    "game_id": "541715e10476afa004fc3b82",
                    "status": "running",
                    "description": "Sample match for testing",
                    "custom_properties": {
                        "type": "coop"
                    },
                    "max_players": 2,
                    "players": [
                        "547447bce0d4d97c5ead8aad"
                    ],
                    "global_state": {},
                    "last_move_id": 0,
                    "moves": [],
                    "match_id": "547447bde0d4d97c5ead8aaf"
                }
            ]
        }

## GET /v1/gamer/matches/{match_id}

Fetches a given match. The response looks slightly different from that of a list of matches, but the data reported for the match is the same.

+ Parameters
    + match_id (required, string) ... the ID of the match as previously returned.

+ Request (application/json)

    + Headers

            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        {
            "match": {
                "game_id": "541715e10476afa004fc3b82",
                "status": "running",
                "description": "Sample match for testing",
                "custom_properties": {
                    "type": "coop"
                },
                "max_players": 2,
                "players": [
                    "547447e92e9dca9d5ef11559"
                ],
                "global_state": {},
                "last_move_id": 0,
                "moves": [],
                "match_id": "547447e92e9dca9d5ef1155b"
            }
        }

+ Response 404 (application/json)

        {
            "name": "InvalidMatch",
            "message": "The match does not exist",
            "status": 404
        }


## GET /v1/gamer/matches/participating

Lists the matches to which you are participating.

+ Request (application/json)

    + Headers

            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        {
            "matches": [
                {
                    "game_id": "541715e10476afa004fc3b82",
                    "status": "running",
                    "description": "Sample match for testing",
                    "custom_properties": {
                        "type": "coop"
                    },
                    "max_players": 2,
                    "players": [
                        "54744826540942cc5e281935"
                    ],
                    "global_state": {},
                    "last_move_id": 0,
                    "moves": [],
                    "match_id": "54744826540942cc5e281937"
                },
                {
                    "game_id": "541715e10476afa004fc3b82",
                    "status": "running",
                    "description": "Another sample match",
                    "custom_properties": {
                        "type": "versus"
                    },
                    "max_players": 1,
                    "players": [
                        "54744826540942cc5e281935"
                    ],
                    "global_state": {},
                    "last_move_id": 0,
                    "moves": [],
                    "match_id": "54744826540942cc5e281938"
                }
            ]
        }

## POST /v1/gamer/matches/{id}/join

Join an existing match.

+ Request (application/json)

    + Parameters
        + match_id (required, string) ... the ID of the match to join.

    + Headers

            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        {
            "match": {
                "game_id": "541715e10476afa004fc3b82",
                "status": "running",
                "description": "Sample match for testing",
                "custom_properties": {
                    "type": "coop"
                },
                "max_players": 3,
                "players": [
                    "54744d9fad0f8b6b62e3b589",
                    "54744d9fad0f8b6b62e3b58a"
                ],
                "global_state": {},
                "last_move_id": 0,
                "moves": [],
                "match_id": "54744d9fad0f8b6b62e3b58b"
            }
        }

+ Response 404 (application/json)

        {
            "name": "InvalidMatch",
            "message": "The match does not exist",
            "status": 404
        }

+ Response 431 (application/json)

        {
            "name": "AlreadyJoinedMatch",
            "message": "You are already being part of this match"
        }

+ Response 431 (application/json)

        {
            "name": "MaximumNumberOfPlayersReached",
            "message": "This match can not accept any additional player"
        }

+ Response 433 (application/json)

        {
            "name": "BadMatchID",
            "message": "This match does not exist or is not active"
        }

## POST /v1/gamer/matches/{id}/leave

Leave a match. You need to have joined before that.

+ Request (application/json)

    + Parameters
        + match_id (required, string) ... the ID of the match to operate on.

    + Headers

            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

+ Response 200 (application/json)

        {
            "match": {
                "custom_properties": {
                    "type": "coop"
                },
                "description": "Sample match for testing",
                "game_id": "541715e10476afa004fc3b82",
                "global_state": {
                    "full": 1,
                    "score": 200
                },
                "last_move_id": "547452e24a0bd3d1656deb59",
                "match_id": "547452e227a434d1657f8cad",
                "max_players": 3,
                "moves": [
                    {
                        "data": {
                            "thrown": "third_dice"
                        },
                        "move_id": "547452e24a0bd3d1656deb59",
                        "player_id": "547452e227a434d1657f8cab"
                    }
                ],
                "players": [
                    "547452e227a434d1657f8cab"
                ],
                "status": "finished"
            }
        }

+ Response 404 (application/json)

        {
            "name": "InvalidMatch",
            "message": "The match does not exist",
            "status": 404
        }

+ Response 433 (application/json)

        {
            "name": "BadMatchID",
            "message": "This match does not exist or is not active"
        }

## POST /v1/gamer/matches/{id}/move{?last_move_id}

Posts a move. This will notify a progress in the match. Note that the `global_state` is updated incrementally, according to the passed attributes. This means that attributes not passed do not get modified or deleted from the `global_state` stored for this game.

### Making moves

Once a match has been started, any player currently belonging to the game is allowed to make moves. It is up to the game itself to determine which players may play and when.

However, one is only allowed to post a move if he is synchronized with the current state of the game. This is done with a parameter named `last_move_id`. Every move made by one of the players, this value changes and is returned in the message posted to the other players. The next player must post this value along with his next move, else he will receive an error indicating that he needs to be resynchronized.

A move is made of a `move` object (which is basically freeform, and represents a message that will be sent to other players indicating what changed) and an optional game state labelled `global_state`. A global game state sould be enough for any player who joins the game to restore the game locally. Thus, when a global state is posted, the list of moves is cleared on the server: only the moves made since the last global state are kept and posted to people who join the game. As such, one can reconstruct the current game by starting from the global state and applying the pending moves.

When a move is posted, all players get notified in the form of an event, taking the following form:

    {
        "type": "move",
        "event": {
            "move": {
                "player_id": "54748855e7a4e69a89d59587",
                "move_id": "54748856cbedae9a890be8b1",
                "data": {"property", "that was found in the move"}
            },
            "global_state": {"global", "game_state"}
        },
        "id": "4055cd81-66a4-42f7-bcbb-42b9a8bc870e"
    }

+ Request (application/json)

    + Parameters
        + last_move_id (required, string) ... the ID of the last move, as received in the body of the match received when joining, or the value received in the last event. Allows to make sure that you are synchronized with the match before making a move.
        + match_id (required, string) ... the ID of the match to operate on.

    + Headers

            x-apikey : testgame-key
            x-apisecret : testgame-secret
            Authorization: Basic gamer_id:gamer_secret

    + Body
        
            {
                "move": {
                    "what": "changed"
                },
                "global_state": {
                    "full": "game_state"
                }
            }

+ Response 200 (application/json)

        {
            "match": {
                "custom_properties": {
                    "type": "coop"
                },
                "description": "Sample match for testing",
                "game_id": "541715e10476afa004fc3b82",
                "global_state": {
                    "full": 1,
                    "score": 200
                },
                "last_move_id": "547452e24a0bd3d1656deb59",
                "match_id": "547452e227a434d1657f8cad",
                "max_players": 3,
                "moves": [
                    {
                        "data": {
                            "thrown": "third_dice"
                        },
                        "move_id": "547452e24a0bd3d1656deb59",
                        "player_id": "547452e227a434d1657f8cab"
                    }
                ],
                "players": [
                    "547452e227a434d1657f8cab"
                ],
                "status": "finished"
            }
        }

+ Response 400 (application/json)

        {
            "name": "MissingParameter",
            "message": "The parameter is invalid or absent: last_move_id",
            "status": 400
        }

+ Response 431 (application/json)

        {
            "name": "InvalidLastMoveId",
            "message": "This move ID is invalid, please resynchronize"
        }

