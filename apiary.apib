FORMAT: 1A
HOST: https://sandbox-api01.clanofthecloud.com

# ClanOfthecloud APIs

[ClanOfTheCloud](http://www.clanofthecloud.com) is a Mobile Gaming Backend as a Service (Baas) Company. You can create an account on our website, 
and try us with your next social game! We're multiplateform and offer a full API.

## Authentication

Once you've created an account, you can provision a Game in the FrontOffice application.

We're using a classic APIKEY / APISECRET couple to authenticate all requests.



# Gamers routes 

In addition to the Authentication above, gamers are identified (at least as `anonymous`).

### implementation
* utilisation de Authentication : Basic `token`

    _proposal :_
    
    * _for a non gamer route, `token` could be APISECRET:APIKEY, called **apptoken**_
    * _for a gamer route, `token` is the one returned by sign in/up methods which is an random-key in our cache (redis) pointing a json = { appid: xxx, userid: zzz, ... }, called **gamertoken**_
    
    _**this means we have 2 redis collections with gamertoken: logged users, revoke at logout, and "active" users in term of CCU, revoked by timeout or suspending app**_


## Application setup [/v1/setup]

Before anything, you should `POST`your credentials to `/v1/setup` to receive various metadata.

### setup [POST]

+ Request (application/json)

    + Body
        
            { 
                "apikey": "testkey",
                "apisecret" : "testsecret"
            }

+ Response 200 (application/json)

        {
            "appid" : "Test Game" ,
            "apptoken" : "dfg54g2dfg54sqdf32wfds54fqdf" ,
            "profile" : {},
            "vfs" : {},
            "gamervfs" : {},
            "matches" : []
        }

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "Invalid App Credentials"
        }


## Gamer Session [/gamer/session]

### sign in [PUT]
## register a new gamer, or reconnect after a lost of gamertoken
this appends when at game first launch, after reinstalling game or after a logout

|Header Field|Description|Value|
|---|---|---|
|Authentication|string, require| Authentication : Basic **apptoken**

###### body description

|Field|Description|Value|
|---|---|---|
|network|string, require|can be one of ["email", "facebook", "googleplus", "anonymous"]
|facebooktoken|string, required when {network=facebook}| the token returned by facebook login
|googleplustoken|string, required when {network=googleplus}| the token returned by google login
|email|string, required when {network=email}| gamer well formed email
|password|string, required when {network=email}| gamer registered password

*no fields are needed in case of 'anonymous' network*

###### response description
|Field|Description|Value|
|---|---|---|
|gamerid|string| id related to the gamer for the current app, used by requests like postevent, addfriend, ... 
|gamertoken|string| token used in basic authentication for gamer authenticate requests
|profile|json| gamer's profile, including "name", "email", "nickname", ...
|vfs|json| list of key/value associated to the app/game
|gamervfs|json| list of key/value associated to the gamer
|matches|json| array of match currently in open state of the gamer

+ Request (application/json)

    + Headers
    
            Authentication : Basic apptoken

    + Body
        
            { 
                "network": "cotc|facebook|googleplus|anonymous",
                "id" : "network dependant id",
                "token" : "network dependant authentification"
            }

+ Response 200 (application/json)

        {
            "gamerid" : "identifier of the user" ,
            "gamertoken" : "reusable token used by gamer related requests" ,
            "profile" : {},
            "vfs" : {},
            "gamervfs" : {},
            "matches" : []
        }

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "optional short error message", 
            "data" : "optional error data" 
        }

### login [GET]
## login an existing gamer with an already known gamertoken
this append when the gamertoken was saved
###### header description
|Header Field|Description|Value|
|---|---|---|
|Authentication|string, require| Authentication : Basic **gamertoken**

###### response description
this request as the same response a the login request except for the fields gamerid and gamertoken which are missing!


+ Request

    + Headers
    
            Authentication : Basic gamertoken

        
+ Response 200 (application/json)

        {
            "profile" : {},
            "vfs" : {},
            "gamervfs" : {},
            "matches" : []
        }

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "the gamer token is no longer available, call signin!", 
            "data" : "optional error data"
        }

### logout [DELETE]
## logout a gamer

### implementation
* the gamertoken is removed from our cache (redis)
* it has to be deleted on client-side!

###### header description
|Header Field|Description|Value|
|---|---|---|
|Authentication|string, require| Authentication : Basic **gamertoken**


+ Request

    + Headers
    
            Authentication : Basic gamertoken

+ Response 200 


## Gamer VFS  [/gamer/vfs]

### retieve gamer's data [GET]

###### header description
|Header Field|Description|Value|
|---|---|---|
|Authentication|string, require| Authentication : Basic **gamertoken**

###### response description
|Field|Description|Value|
|---|---|---|
|gamervfs|json| list of key/value associated to the gamer


+ Request

    + Headers
    
            Authentication : Basic gamertoken

+ Response 200 (application/json)

        {
            "gamervfs" : {}
        }

+ Response 401 (application/json)

        {
            "code" : "Unauthorized",
            "message" : "the gamer token is no longer available, call signin!", 
            "data" : "optional error data" 
        }        
        

